#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]:-$0}")" &>/dev/null && pwd -P)

GH_AR_VERSION=0.5
DATE_TYPE=

if [ -n "${GH_ACTIVITY_REPORT_DEBUG:-}" ]; then
    set -x
fi

date_detect() {
    if [ -z "${DATE_TYPE}" ]; then
        date --version > /dev/null 2>&1 && DATE_TYPE="GNU" || DATE_TYPE="BSD"
    fi
}

is_gnu_date() {
    date_detect
    if [ "${DATE_TYPE}" = "GNU" ]; then
        return 0
    else
        return 1
    fi
}

date_day() {
    if is_gnu_date; then
        date -d "${1} day" "+%Y-%m-%d"
    else
        date -v "${1}d" "+%Y-%m-%d"
    fi
}

date_month_first() {
    if is_gnu_date; then
        date -d "${1} month" "+%Y-%m-01"
    else
        date -v "${1}m" "+%Y-%m-01"
    fi
}

date_month_last() {
    FIRST=$(date_month_first "${1}")
    if is_gnu_date; then
        date -d "1 days ago + 1 month ${FIRST}" "+%Y-%m-%d"
    else
        date -v "+1m" -v "-1d" -j -f "%Y-%m-%d" "${FIRST}" "+%Y-%m-%d"
    fi
}

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

usage() {
    # shellcheck disable=SC1078
    die "gh-activity-report version ${GH_AR_VERSION}

  -f, --format       string             Output format: [comment|gh|link|list|markdown] (default \"gh\")
  -h, --help                            Show help
      --version                         Show version
  -l, --limit        number             Maximum number of results to fetch
      --owner        string             Filter on repository owner
      --prs                             Search for pull requests
  -R, --repo         [HOST/]OWNER/REPO  Specify search target
      --sort         string             Sort fetched results: {comments|created|interactions|reactions|reactions-+1|reactions--1|reactions-heart|reactions-smile|reactions-tada|reactions-thinking_face|updated} (default \"updated\")
      --state        string             Filter based on state: {open|closed}
      --visibility   string             Filter based on repository visibility: {public|private|internal}
  -w, --web                             Open the search query in the web browser

account filter: Default --auther @me, if not specified bellow
                Account filters can be specified multiple times.
                In that case, it becomes an OR condition
  --assignee         [name]             Filter by assignee
  --author           [name]             Filter by author
  --commenter        [name]             Filter based on comments by user
  --involves         [name]             Filter based on involvement of user
  --mentions         [name]             Filter based on user mentions
  --review-requested [name]             Filter based on comments by user
  --reviewed-by      [name]             Filter on user who reviewed

   (defaults to \"@me\" if not specified [name])

date range:
  -d, --days-ago     since[..until]     Specify the period to filter n days ago
  -m, --months-ago   since[..until]     Specify the period to filter n months ago (since is the first day, until is the end of the month)
      --since        yyyy-mm-dd         Start date to filter by date
      --until        yyyy-mm-dd         End date to filter by date

date filter:
  --created                             Filter based on created at date
  --closed                              Filter on closed at date
  --merged                              Filter on merged at date
  --updated                             Filter on last updated at date

pull_request filter:
  --draft                               Filter based on draft state
  --review          string              Filter based on review status: {none|required|approved|changes_requested}
" "$1"
}

declare -a GH_OPTIONS
declare -a GH_PRS_OPTIONS
declare -a GH_ISSUES_OPTIONS
GH_BYPASS_OPTIONS=()

resolve_username() {
    if "${GITHUB_ACTIONS:-false}"; then
        case "${1-}" in
        "@me" )
            echo "${GITHUB_ACTOR:-@me}"
            return ;;
        esac
    fi
    echo "${1}"
}

append_csv_param() {
    if [ -n "${1}" ]; then
        echo "${1},${2}"
    else
        echo "${2}"
    fi
}

test_empty_or_option_param() {
    [ -n "${1}" ] && [ "${1:0:2}" != "--" ]
}

test_empty_param() {
    [ -n "${1}" ] || usage 1
}

parse_params() {
    # default values of variables set from params
    SINCE=
    UNTIL=
    AUTHOR=
    ASSIGNEE=
    INVOLVES=
    MENTIONS=
    COMMENTER=
    REVIEW_REQUESTED=
    REVIEWED_BY=
    PRS_DATE_FILTER="updated"
    ISSUES_DATE_FILTER="updated"
    LIMIT=
    OWNER=
    REPO=
    SORT="updated"
    STATE=
    VISIBILITY=
    SEARCH_SUBCOMMAND="issues"
    FORMAT=
    INPUT_BYPASS_OPTIONS=()

    while :; do
        case "${1-}" in
        --assignee )
            NAME_="${2-}"
            if test_empty_or_option_param "${NAME_-}"; then shift; else NAME_="@me"; fi
            ASSIGNEE=$(append_csv_param "${ASSIGNEE}" "${NAME_-}")
            ;;
        --author )
            NAME_="${2-}"
            if test_empty_or_option_param "${NAME_-}"; then shift; else NAME_="@me"; fi
            AUTHOR=$(append_csv_param "${AUTHOR}" "${NAME_-}")
            ;;
        --created )
            PRS_DATE_FILTER="created"
            ISSUES_DATE_FILTER="created"
            ;;
        --closed )
            PRS_DATE_FILTER="closed"
            ISSUES_DATE_FILTER="closed"
            ;;
        --commenter )
            NAME_="${2-}"
            if test_empty_or_option_param "${NAME_-}"; then shift; else NAME_="@me"; fi
            COMMENTER=$(append_csv_param "${COMMENTER}" "${NAME_-}")
            ;;
        --days-ago| -d )
            test_empty_param "${2-}"
            DAYS_AGO="${2-}"
            DAYS_AGO_SINCE="${DAYS_AGO%%..*}"
            DAYS_AGO_UNTIL_="${DAYS_AGO#"${DAYS_AGO_SINCE}"}"
            DAYS_AGO_UNTIL="${DAYS_AGO_UNTIL_##*..}"
            if [ -n "${DAYS_AGO_SINCE}" ]; then
                SINCE=$(date_day "-${DAYS_AGO_SINCE}")
            fi
            if [ -n "${DAYS_AGO_UNTIL}" ]; then
                UNTIL=$(date_day "-${DAYS_AGO_UNTIL}")
            fi
            shift ;;
        --draft )
            GH_PRS_OPTIONS+=(--draft)
            SEARCH_SUBCOMMAND="prs"
            ;;
        --format| -f )
            test_empty_param "${2-}"
            case "${2-}" in
            gh ) ;;
            * )
                FORMAT="${2-}"
                if [ ! -f "${SCRIPT_DIR}/format/${FORMAT}.template" ] \
                && [ ! -f "${SCRIPT_DIR}/format/issues/${FORMAT}.template" ]; then
                    echo "error: invalid format type"
                    usage 1
                fi
                ;;
            esac
            shift ;;
        --involves )
            NAME_="${2-}"
            if test_empty_or_option_param "${NAME_-}"; then shift; else NAME_="@me"; fi
            INVOLVES=$(append_csv_param "${INVOLVES}" "${NAME_-}")
            ;;
        --limit| -l )
            LIMIT="${2-}"
            shift ;;
        --mentions )
            NAME_="${2-}"
            if test_empty_or_option_param "${NAME_-}"; then shift; else NAME_="@me"; fi
            MENTIONS=$(append_csv_param "${MENTIONS}" "${NAME_-}")
            ;;
        --merged )
            GH_PRS_OPTIONS+=("--merged")
            PRS_DATE_FILTER="merged-at"
            SEARCH_SUBCOMMAND="prs"
            ;;
        --months-ago | -m )
            test_empty_param "${2-}"
            MONTHS_AGO="${2-}"
            MONTHS_AGO_SINCE="${MONTHS_AGO%%..*}"
            MONTHS_AGO_UNTIL_="${MONTHS_AGO#"${MONTHS_AGO_SINCE}"}"
            MONTHS_AGO_UNTIL="${MONTHS_AGO_UNTIL_##*..}"
            if [ -n "${MONTHS_AGO_SINCE}" ]; then
                SINCE=$(date_month_first "-${MONTHS_AGO_SINCE}")
            fi
            if [ -n "${MONTHS_AGO_UNTIL}" ]; then
                UNTIL=$(date_month_last "-${MONTHS_AGO_UNTIL}")
            fi
            shift ;;
        --owner )
            test_empty_param "${2-}"
            OWNER="${2-}"
            shift ;;
        --prs )
            SEARCH_SUBCOMMAND="prs"
            ;;
        --repo| -R )
            test_empty_param "${2-}"
            REPO="${2-}"
            shift ;;
        --review )
            test_empty_param "${2-}"
            GH_PRS_OPTIONS+=(--review "${2-}")
            SEARCH_SUBCOMMAND="prs"
            shift ;;
        --review-requested )
            NAME_="${2-}"
            if test_empty_or_option_param "${NAME_-}"; then shift; else NAME_="@me"; fi
            REVIEW_REQUESTED=$(append_csv_param "${REVIEW_REQUESTED}" "${NAME_-}")
            SEARCH_SUBCOMMAND="prs"
            ;;
        --reviewed-by )
            NAME_="${2-}"
            if test_empty_or_option_param "${NAME_-}"; then shift; else NAME_="@me"; fi
            REVIEWED_BY=$(append_csv_param "${REVIEWED_BY}" "${NAME_-}")
            SEARCH_SUBCOMMAND="prs"
            ;;
        --since )
            test_empty_param "${2-}"
            SINCE="${2-}"
            shift ;;
        --sort )
            test_empty_param "${2-}"
            SORT="${2-}"
            shift ;;
        --state )
            test_empty_param "${2-}"
            STATE="${2-}"
            shift ;;
        --until )
            test_empty_param "${2-}"
            UNTIL="${2-}"
            shift ;;
        --updated )
            PRS_DATE_FILTER="updated"
            ISSUES_DATE_FILTER="updated"
            ;;
        --visibility )
            test_empty_param "${2-}"
            VISIBILITY="${2-}"
            shift ;;
        --web| -w )
            GH_OPTIONS+=(--web)
            ;;
        --version )
            echo "gh-activity-report version ${GH_AR_VERSION}"
            ;;
        --help| -h )
            usage 0
            ;;
        -- )
            shift
            INPUT_BYPASS_OPTIONS=("$@")
            break ;;
        --* )
            echo "${1:-} is invalid option."
            usage 1
            ;;
        *) break ;;
        esac
        shift
    done
    return 0
}

parse_params "$@"

if [ -n "${LIMIT}" ]; then
    GH_OPTIONS+=(--limit "${LIMIT}")
fi
if [ -n "${OWNER}" ]; then
    GH_OPTIONS+=(--owner "${OWNER}")
fi
if [ -n "${REPO}" ]; then
    GH_OPTIONS+=(--repo "${REPO}")
fi
if [ -n "${SORT}" ]; then
    GH_OPTIONS+=(--sort "${SORT}")
fi
if [ -n "${STATE}" ]; then
    GH_OPTIONS+=(--state "${STATE}")
fi
if [ -n "${VISIBILITY}" ]; then
    GH_OPTIONS+=(--visibility "${VISIBILITY}")
fi

# date filter
DATE_QUERY=
if [ -n "${SINCE}" ]; then
    if [ -n "${UNTIL}" ]; then
        DATE_QUERY="${SINCE}..${UNTIL}"
    else
        DATE_QUERY=">=${SINCE}"
    fi
else
    if [ -n "${UNTIL}" ]; then
        DATE_QUERY="<=${UNTIL}"
    fi
fi
if [ -n "${DATE_QUERY}" ]; then
    GH_PRS_OPTIONS+=("--${PRS_DATE_FILTER}" "${DATE_QUERY}")
    GH_ISSUES_OPTIONS+=("--${ISSUES_DATE_FILTER}" "${DATE_QUERY}")
fi

# account filter
if [ -z "${AUTHOR}${ASSIGNEE}${INVOLVES}${MENTIONS}${COMMENTER}${REVIEW_REQUESTED}${REVIEWED_BY}" ]; then
    AUTHOR="@me"
fi

multi_option() {
    IFS="," read -r -a VARS <<< "${2}"
    for index in "${!VARS[@]}"; do
        var=$(resolve_username "${VARS[${index}]}")
        if [ "${index}" == 0 ]; then
            GH_OPTIONS+=("${1}" "${var}")
        else
            GH_BYPASS_OPTIONS+=("${3:-"${1#--}"}":"${var}")
        fi
    done
}

if [ -n "${AUTHOR}" ]; then
    multi_option --author "${AUTHOR}"
fi
if [ -n "${ASSIGNEE}" ]; then
    multi_option --assignee "${ASSIGNEE}"
fi
if [ -n "${INVOLVES}" ]; then
    multi_option --involves "${INVOLVES}"
fi
if [ -n "${MENTIONS}" ]; then
    multi_option --mentions "${MENTIONS}"
fi
if [ -n "${COMMENTER}" ]; then
    multi_option --commenter "${COMMENTER}"
fi
if [ -n "${REVIEW_REQUESTED}" ]; then
    multi_option --review-requested "${REVIEW_REQUESTED}"
fi
if [ -n "${REVIEWED_BY}" ]; then
    multi_option --reviewed-by "${REVIEWED_BY}"
fi

get_format_template() {
    FORMAT_TEMPLATE=$(cat "${1}/${FORMAT}.template")
    JSON_KEYS=$(cat "${1}/${FORMAT}.keys")
    GH_OPTIONS+=(--json "${JSON_KEYS}")
    GH_OPTIONS+=(--template "${FORMAT_TEMPLATE}")
}
    
if [ -n "${FORMAT}" ]; then
    if [ -f "${SCRIPT_DIR}/format/${FORMAT}.template" ]; then
        get_format_template "${SCRIPT_DIR}/format"
    else
        get_format_template "${SCRIPT_DIR}/format/${SEARCH_SUBCOMMAND}"
    fi    
fi

is_contains() {
    match="${1}"
    shift
    while [ -n "${1}" ]; do
        [[ "${match}" == "${1}" ]] && return 0
        shift
    done
    return 1
}

if [ "${#GH_BYPASS_OPTIONS[@]}" != 0 ]; then
    is_contains "--" "${INPUT_BYPASS_OPTIONS[@]}" "" || INPUT_BYPASS_OPTIONS+=(--)
fi

search() {
    if [ "${SEARCH_SUBCOMMAND}" = "prs" ]; then
        gh search prs "${GH_OPTIONS[@]}" "${GH_PRS_OPTIONS[@]}" "${INPUT_BYPASS_OPTIONS[@]}" "${GH_BYPASS_OPTIONS[@]}"
    else
        gh search issues --include-prs "${GH_OPTIONS[@]}" "${GH_ISSUES_OPTIONS[@]}" "${INPUT_BYPASS_OPTIONS[@]}"  "${GH_BYPASS_OPTIONS[@]}"
    fi
}

search
